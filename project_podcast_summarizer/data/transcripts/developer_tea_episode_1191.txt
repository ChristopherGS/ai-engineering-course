A large portion of the people who listen to this show are very early in their career. And it makes sense, right? Not everybody is going to try out software development and stick with it. Now I hope that the people who listen to this show, unless you really don't enjoy it, I really hope that you find the fortitude and to go back to a previous episode, the grit to stick with software development even when it gets difficult. But there's another problem that's facing developers, particularly young developers who haven't really gained a lot of experience in any industry, not only development, but any industry. And this also faces developers who are not necessarily young. You've had other parts of your career and you do have experience, but you don't have much as a developer. You're listening to Developer Tea. My name is Jonathan Cutrell. And my job here is to help you become a better developer. I do that by coaching you through the hard parts of being a developer. Now certainly sometimes you're going to face code complications, right? You're going to face difficult problems that you have to solve in code. But by and large, the hardest part of your career on average is not going to be the code. Most of the code that we write, we generally know how to write code decently well. Now the audience that I just now pointed this episode at, you're still learning how to write code. But even for you, most of your problems, most of the hard stuff, the stuff that differentiates a OK developer from a great developer. And I think you want to be a great developer. The stuff that differentiates those two people, generally speaking is not only going to be related to your code. Now you can't ignore your code. You can't ignore the product that you're building. But you absolutely can't ignore the things that we're talking about in this developer career roadmap series, the traits of a great developer. And today is no exception. Here's the reality. Every great developer had a starting point and every great developer at some point in their lives had zero experience. They were introduced to software development. They were introduced to, you know, a front end web development. They were introduced to CSS for the first time. At some point they wrote poor code. At some point they were really bad at what they were doing. And this is a very common thing that helps young developers in really beginners in all spheres, not just in development. It helps us kind of gain perspective that everybody was a beginner at one point. But we want to talk about not just the fact that everybody was really bad at one point. That's not enough. We need to understand what was the track that those beginners got on in order to become successful. And that's what we're trying to uncover on this show all the time. We want to understand what helps you both become a lifelong learner, right? Become a better developer every single day. But also what helps you excel beyond someone else who has the same technical skills as you, right? Technical skill is not all there is to the story. And that's really the moral of that whole intro is that, you know, you as a software developer, whether you're a beginner or if you're very experienced, your technical skill is only part of the story. So if you are very young in your career, what is a trait that can help you overcome the boundary of a lack of experience? And perhaps we should talk for a moment about why experience is a good thing. Certainly experience provides you with perspective, right? It gives you some information to draw on from the past to inform your current decision making. But unfortunately, experience is not something that you can just kind of snap your fingers and decide to have. It's not a trait that you can develop. It is only something that comes as a result of time and effort. And unfortunately, no matter what you do, we all are essentially bound by the same kind of time constraints, right? We can try to make more time in our day. And there's that's one of the reasons why there's so many good podcast episodes out there about becoming more productive and making the most of your time. And I encourage you to take the time to invest in, you know, setting yourself up for success in that way, right? Eliminating waste and providing yourself with the time that you need to be able to work on your career. But ultimately, there is a ceiling there, right? The ceiling is that everyone has a rate limit that they can't lift of experience. Of course, experience is something that you will gain over time. And it's important that you set yourself up for valuable experiences, right? So if you are getting an internship, I recommend that you get an internship that challenges you, for example, but what can you do when you are inexperienced? And let's talk for a moment about what an inexperienced person lacks. They lack that context that an experienced person has. They may lack the perspective. They may not have the information that they need from historical experiences that they've gone through to be able to make the best decision. So how can you be successful when you don't have experience? That's what we're going to talk about right after we talk about today's sponsor, Fuse. For the most part, if you've been developing a native mobile applications for very long at all, then you know that the tool set is largely remaining static. It's been the same for quite a while on both of the major platforms and also the third major platform. You probably know which three I'm talking about. And that's what Fuse is looking to change. Fuse has unique features that include a cross-platform, component-based UI engine, and real-time workflow where every change you make to the code is instantly reflected on your devices, and in the desktop simulator that comes with Fuse. It runs on Mac OS, but it also runs on Windows and it lets you make a real native apps for iOS and for Android. If Fuse installers include everything you need to get started and there's no complicated setup process. Now if you've actually worked in game development, if you used a program called Unity, I actually used this when I was in school, then that's kind of for the game sphere. This is essentially like Unity for app development. Fuse is officially at 1.0 status and they're no longer in beta, which is a big deal. This means that you can start using this stuff to build production products. They have Fuse Studio, which is the new premium editor in Workspace for working with Fuse projects, and this is included in the professional plan. And of course, that introduces their paid professional plan. This is the Fuse built UI kit that comes with this camera components, premium charting, lots of stuff that comes with this paid plan, but most people don't even need the paid plan. So I encourage you to go and check out what Fuse provides for free to you, totally free, by going to fuse tools.com slash plans. Now if you do decide that you want to try out that professional plan, then it's going to be 70% off for you as a developer, T-listener. If you use the promo code DT, I want you to catch that. 70% off for 12 months worth of Fuse premium. And you can go and check out what Fuse has to offer by going to fuse tools.com slash plan. Remember, 70% off for 12 months if you use the code DT. And those codes have to be redeemed by December 31st of 2017. So if you're listening this episode in the future, then it's past that date, then unfortunately this code is probably expired. But most of you are going to be listening to this before that date. So I encourage you to go and check it out once again, fuse tools.com slash plans. Thanks again to Fuse for sponsoring today's episode of Developer Tea. So how can a developer with little to no experience, someone who is learning to code and they're ready to get started, ready to look for a job, they're ready to look for an internship. You know, we talk about the value of internships in the developer career roadmap. And you've identified some places that you want to work for. Maybe you've identified in a places that are going to challenge you and give you kind of a path for growth, but you have zero experience. And ultimately what that means is that you can't really have confidence. And this is the key word that I want you to kind of wrap your mind around for a second confidence is the result of experience. Once you start gaining experience, that is how you gain confidence because confidence is informed by those experiences. You have confidence because you believe in your own abilities to be able to solve problems. And the only way you can believe in your own abilities to solve problems is if you actually have experience solving problems. Now, I want to be very clear here. I want to draw a line, a distinct line. There's a very very big difference between believing that you are capable in the future, believing that you are capable of accomplishing something and having confidence that you can accomplish something. Believing that you're capable of accomplishing something can not be informed by any experience at all. You could be wrong or you could be right. And you believe in your own abilities and you believe in the raw materials and that first experience, you believe you have what it takes for that first experience to be successful. That's not the kind of confidence or belief that we're talking about in this episode in order for you to have confidence in the way that we're talking about it here, you need that experience. So how do you operate without experience? We've been asking this over and over. And the reality is you must operate through bravery. Bravery is kind of a difficult word to say on a development podcast because so much of what we do is centered around being able to validate what we're doing. And unfortunately, bravery is not one of those things that's easily validated. Bravery is the gumption and the energy combined to actually go and do something that you've never done before. Not in a foolish way, but in a way that is accepting of potential failure. Let me say that again. Bravery is the gumption and the energy to go and do something that you've never done before, allowing for failure for the sake of experience and learning. This is such a big key to success. And it's something that really we could talk about for a hundred episodes and highly focused on this concept of bravery. If learning and focus are two pillars of what it takes to be a good developer, two pillars of what this show is about, really, then bravery is that third pillar. Being brave means identifying the reality that the only way that you're going to be able to gain experience, the only way you're going to get better as if you actually go through the process of doing something. And unfortunately, so many developers, potential developers careers are cut short because they lack in this particular trait. Bravery allows for failure. Now, that doesn't mean that you walk in again, foolishly. It means you walk in prepared. For example, it's much easier to act out of bravery if you have, you know, a emergency fund saved up. So if you decide to leave your job one day and you think that that looks like bravery and in fact, all it means is you can't pay your bills next month, then that's problematic. You're allowing for failure, but in a catastrophic way. Instead, preparing for small failures and setting yourself up for a continued and iterative process, an iterative practice of bravery, that's key. That is the trait that we're talking about. Giving yourself the space to do something that you've never done before with the hope in the expectation that you will get better at doing that thing. You're going to gain experience, and eventually you're going to generate confidence from those experiences. But first, on day one, you have to act out of bravery. Thank you so much for listening to today's episode of Developer Tea. This is the last in this series of developer career road map traits of a great developer. You know, we've done quite a few of these episodes. We're going to do a recap episode in the next episode to kind of go back and talk about how these these various traits kind of interact with each other. And hopefully you're gaining value out of these traits. And I'd hope that you will pass this stuff around to people that you think could benefit from it. These developer career road map episodes are not intended to be something that you listen to once you never return to. This is kind of the key volumes if you will of Developer Teathat we can point back to and come back and say, yes, this is this is still a trait that is required for a great developer. Thank you so much again for listening. Thank you again to fuse for sponsoring today's episode of Developer Tea. If you are a mobile application diva or maybe you aren't a mobile application developer and you want to act in a brave way, you want to actually go and build a mobile application for the first time. Fuse may be the perfect platform for you to start on rather than going to some of these antiquated tools. These things that have been around for a long time and really have remained unchanged. Instead go and check out fuse. FuseTools.com slash plans. Remember the code dt if you want to get 70% off the paid plan for 12 months. And that code has to be redeemed by December 31st of 2017. Thanks again to fuse. Thank you so much for listening. If you don't want to miss out on future episodes of Developer Tea, we have interviews. We have these kind of focused episodes. Then make sure you subscribe and whatever podcasting up you're using right now. Thank you so much for listening and until next time, enjoy your tea.